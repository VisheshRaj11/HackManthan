<% layout("layouts/boilerplate") %>

    <canvas id="snapshot-canvas" class="hidden"></canvas>

    <section id="analysis-section"
        class="relative min-h-screen bg-gray-900 flex flex-col items-center justify-center p-6  pt-[100px] overflow-hidden">
        <div id="particles-js" class="absolute inset-0 z-0"></div>

        <div id="alert-overlay"></div>

        <div class="relative z-10 w-full lg:pt-0 max-w-screen-2xl h-full flex flex-col gap-6 text-white pt-[90px]">

            <div class="flex flex-col lg:flex-row gap-6 flex-grow" style="height: 70vh;">

                <div id="video-container"
                    class="w-full lg:w-3/5 h-full bg-black rounded-xl shadow-2xl flex flex-col border border-gray-700 overflow-hidden transition-all duration-300">
                    <div class="p-4 bg-gray-800 border-b border-gray-700 flex items-center justify-between">
                        <h2 class="text-lg font-semibold">Live Camera Feed</h2>
                        <span id="video-status" class="flex items-center gap-2 text-sm font-semibold text-gray-400">
                            OFFLINE
                        </span>
                    </div>
                    <div class="flex-grow bg-black flex items-center justify-center">
                        <img id="videoFeed" src="" alt="Video feed will appear here" class="w-full h-auto"
                            crossorigin="anonymous">
                    </div>
                </div>

                <div id="assistant-container"
                    class="w-full lg:w-2/5 h-full bg-gray-800 backdrop-blur-sm rounded-2xl shadow-2xl flex flex-col border border-gray-700 transition-all duration-300">
                    <div class="p-4 border-b border-gray-600">
                        <h3 class="font-bold text-lg text-center">AI Assistant</h3>
                    </div>
                    <div id="chat-box" class="flex-grow p-4 space-y-4 overflow-y-auto">
                        <div class="flex justify-start">
                            <p class="bg-gray-700 rounded-lg p-3 max-w-xs">Hello! Connecting to the stream. Once live,
                                you can ask me anything about the video feed.</p>
                        </div>
                    </div>
                    <div class="p-4 border-t border-gray-600">
                        <form id="chat-form" class="flex items-center gap-3">
                            <input id="chat-input" type="text" placeholder="Waiting for video stream..."
                                class="w-full bg-gray-700 text-white rounded-full py-2 px-4 border border-gray-600 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-all disabled:opacity-50"
                                autocomplete="off" disabled>
                            <button id="chat-button" type="submit"
                                class="bg-blue-600 hover:bg-blue-700 text-white font-bold p-3 rounded-full transition-transform transform hover:scale-110 disabled:opacity-50 disabled:cursor-not-allowed"
                                disabled>
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20"
                                    fill="currentColor">
                                    <path
                                        d="M10.894 2.553a1 0 00-1.788 0l-7 14a1 1 0 001.169 1.409l5-1.429A1 1 0 009 15.571V11a1 1 0 112 0v4.571a1 1 0 00.725.962l5 1.428a1 1 0 001.17-1.408l-7-14z" />
                                </svg>
                            </button>
                        </form>
                    </div>
                </div>
            </div>

            <!-- NEW: Auto Analysis Container -->
            <div id="auto-analysis-container"
                class="w-full bg-gray-800 backdrop-blur-sm rounded-xl shadow-2xl flex flex-col border border-gray-700 transition-all duration-300">
                <div class="p-4 border-b border-gray-600 flex items-center justify-between">
                    <h3 class="font-bold text-lg">Live Scene Analysis</h3>
                    <div class="flex items-center gap-3">
                        <span id="analysis-status" class="text-sm text-gray-400 flex items-center gap-2">
                            <span class="relative flex h-2 w-2">
                                <span class="animate-ping absolute inline-flex h-full w-full rounded-full bg-gray-400 opacity-75"></span>
                                <span class="relative inline-flex rounded-full h-2 w-2 bg-gray-400"></span>
                            </span>
                            Auto-analysis starting...
                        </span>
                        <span id="analysis-timer" class="text-sm text-blue-400 font-mono bg-blue-900/30 px-2 py-1 rounded">
                            15s
                        </span>
                    </div>
                </div>
                <div id="analysis-log" class="flex-grow p-4 space-y-3 max-h-40 overflow-y-auto">
                    <div class="text-center text-gray-500 py-4">
                        <p>Automatic scene analysis will begin when video stream is live...</p>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <style>
        #particles-js {
            position: absolute;
            width: 100%;
            height: 100%;
            z-index: 0;
        }

        @keyframes pulse-red {
            0% {
                box-shadow: 0 0 0 0 rgba(255, 59, 48, 0.7);
            }
            70% {
                box-shadow: 0 0 10px 20px rgba(255, 59, 48, 0);
            }
            100% {
                box-shadow: 0 0 0 0 rgba(255, 59, 48, 0);
            }
        }

        .critical-alert {
            border-color: #FF3B30 !important;
            animation: pulse-red 2s infinite;
        }

        #alert-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: 20;
            pointer-events: none;
            opacity: 0;
            transition: opacity 0.5s ease-in-out;
            background: radial-gradient(ellipse at center, 
                rgba(255, 20, 20, 0) 0%, 
                rgba(255, 20, 20, 0.3) 80%,
                rgba(200, 0, 0, 0.5) 100%
            );
        }

        #alert-overlay.active {
            opacity: 1;
            animation: flicker-red 1.5s infinite linear;
        }

        @keyframes flicker-red {
          0%, 100% { opacity: 1; }
          20% { opacity: 0.7; }
          40% { opacity: 0.9; }
          60% { opacity: 0.6; }
          80% { opacity: 1; }
        }

        /* Analysis log styles */
        .analysis-entry {
            border-left: 3px solid #3b82f6;
            padding-left: 12px;
            margin-bottom: 8px;
        }

        .analysis-entry.alert {
            border-left-color: #ef4444;
            background: rgba(239, 68, 68, 0.1);
        }

        .analysis-timestamp {
            font-size: 0.75rem;
            color: #9ca3af;
            margin-bottom: 2px;
        }

        .analysis-content {
            font-size: 0.875rem;
        }
    </style>

    <script src="https://cdn.jsdelivr.net/npm/particles.js@2.0.0/particles.min.js"></script>
    <script>
        // --- PARTICLES.JS INITIALIZATION ---
        if (document.getElementById('particles-js')) {
            particlesJS('particles-js', {
                "particles": { "number": { "value": 80 }, "color": { "value": "#ffffff" }, "shape": { "type": "circle" }, "opacity": { "value": 0.5 }, "size": { "value": 3 }, "line_linked": { "enable": true, "distance": 150, "color": "#ffffff", "opacity": 0.2 }, "move": { "enable": true, "speed": 2 } },
                "interactivity": { "events": { "onhover": { "enable": true, "mode": "grab" } }, "modes": { "grab": { "distance": 140 } } },
                "retina_detect": true
            });
        }

        document.addEventListener('DOMContentLoaded', () => {
            // Video elements
            const videoFeed = document.getElementById('videoFeed');
            const videoStatus = document.getElementById('video-status');
            const canvas = document.getElementById('snapshot-canvas');

            // Chat elements
            const chatForm = document.getElementById('chat-form');
            const chatInput = document.getElementById('chat-input');
            const chatButton = document.getElementById('chat-button');
            const chatBox = document.getElementById('chat-box');

            // Auto-analysis elements
            const analysisLog = document.getElementById('analysis-log');
            const analysisStatus = document.getElementById('analysis-status');
            const analysisTimer = document.getElementById('analysis-timer');

            // Alert elements
            const videoContainer = document.getElementById('video-container');
            const assistantContainer = document.getElementById('assistant-container');
            const autoAnalysisContainer = document.getElementById('auto-analysis-container');
            const alertOverlay = document.getElementById('alert-overlay');

            const videoUrl = '<%= videoUrl %>';
            let autoAnalysisInterval = null;
            let countdownInterval = null;
            let currentCountdown = 15;

            // --- Core Functions ---

            async function startStream(url) {
                const streamUrl = url || "0";
                updateStatus('CONNECTING...', 'yellow');
                chatInput.disabled = true;
                chatButton.disabled = true;
                updateAnalysisStatus('WAITING FOR STREAM', 'gray');

                try {
                    await fetch('http://localhost:5001/start_stream', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ stream_url: streamUrl })
                    });

                    videoFeed.src = `http://localhost:5001/video_feed?t=${new Date().getTime()}`;

                } catch (error) {
                    console.error("Error starting stream:", error);
                    updateStatus('STREAM FAILED', 'gray');
                    chatInput.placeholder = 'Failed to start stream.';
                    updateAnalysisStatus('STREAM FAILED', 'gray');
                }
            }

            // --- NEW: Auto Analysis Functions ---
            function startAutoAnalysis() {
                // Clear any existing intervals
                stopAutoAnalysis();
                
                // Start the first analysis immediately
                performAutoAnalysis();
                
                // Then set up interval for every 15 seconds
                autoAnalysisInterval = setInterval(performAutoAnalysis, 15000);
                
                // Start countdown timer
                startCountdown();
            }

            function stopAutoAnalysis() {
                if (autoAnalysisInterval) {
                    clearInterval(autoAnalysisInterval);
                    autoAnalysisInterval = null;
                }
                if (countdownInterval) {
                    clearInterval(countdownInterval);
                    countdownInterval = null;
                }
            }

            function startCountdown() {
                currentCountdown = 15;
                updateTimerDisplay();
                
                countdownInterval = setInterval(() => {
                    currentCountdown--;
                    updateTimerDisplay();
                    
                    if (currentCountdown <= 0) {
                        currentCountdown = 15;
                    }
                }, 1000);
            }

            function updateTimerDisplay() {
                analysisTimer.textContent = `${currentCountdown}s`;
            }

            async function performAutoAnalysis() {
                if (!videoFeed.src || videoFeed.naturalWidth === 0) {
                    console.log("Video feed not ready for analysis");
                    return;
                }

                try {
                    updateAnalysisStatus('ANALYZING...', 'yellow');
                    
                    const ctx = canvas.getContext('2d');
                    canvas.width = videoFeed.naturalWidth;
                    canvas.height = videoFeed.naturalHeight;
                    ctx.drawImage(videoFeed, 0, 0, canvas.width, canvas.height);

                    const base64Frame = canvas.toDataURL('image/jpeg').split(',')[1];

                    const response = await fetch('/auto-analyze', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ frame: base64Frame })
                    });

                    if (!response.ok) {
                        throw new Error(`Auto-analysis failed with status: ${response.status}`);
                    }

                    const data = await response.json();
                    
                    // Add analysis to log
                    addAnalysisEntry(data.description, data.alert, data.timestamp);
                    
                    // Trigger alert if needed
                    if (data.alert) {
                        triggerAlert();
                    }
                    
                    updateAnalysisStatus('ANALYSIS COMPLETE', 'green');
                    
                    // Reset status after 2 seconds
                    setTimeout(() => {
                        if (analysisStatus.textContent.includes('COMPLETE')) {
                            updateAnalysisStatus('MONITORING', 'blue');
                        }
                    }, 2000);

                } catch (error) {
                    console.error('Error in auto analysis:', error);
                    updateAnalysisStatus('ANALYSIS FAILED', 'red');
                    
                    // Add error entry to log
                    addAnalysisEntry(`Analysis failed: ${error.message}`, false, new Date().toLocaleTimeString());
                }
            }

            function addAnalysisEntry(description, isAlert = false, timestamp) {
                const entry = document.createElement('div');
                entry.className = `analysis-entry ${isAlert ? 'alert' : ''}`;
                
                entry.innerHTML = `
                    <div class="analysis-timestamp">${timestamp}</div>
                    <div class="analysis-content">${description}</div>
                `;
                
                // Add to top of log
                analysisLog.insertBefore(entry, analysisLog.firstChild);
                
                // Limit log entries to 10
                const entries = analysisLog.querySelectorAll('.analysis-entry');
                if (entries.length > 10) {
                    analysisLog.removeChild(entries[entries.length - 1]);
                }
                
                // Clear initial message if present
                const initialMessage = analysisLog.querySelector('.text-center');
                if (initialMessage) {
                    analysisLog.removeChild(initialMessage);
                }
            }

            function updateAnalysisStatus(text, color) {
                let colorClasses = '';
                let pingClasses = '';

                switch (color) {
                    case 'yellow':
                        colorClasses = 'text-yellow-500';
                        pingClasses = 'bg-yellow-400';
                        break;
                    case 'red':
                        colorClasses = 'text-red-500';
                        pingClasses = 'bg-red-400';
                        break;
                    case 'green':
                        colorClasses = 'text-green-500';
                        pingClasses = 'bg-green-400';
                        break;
                    case 'blue':
                        colorClasses = 'text-blue-500';
                        pingClasses = 'bg-blue-400';
                        break;
                    default:
                        colorClasses = 'text-gray-400';
                        pingClasses = '';
                }

                analysisStatus.className = `text-sm flex items-center gap-2 ${colorClasses}`;

                if (pingClasses) {
                    analysisStatus.innerHTML = `
                        <span class="relative flex h-2 w-2">
                            <span class="animate-ping absolute inline-flex h-full w-full rounded-full ${pingClasses} opacity-75"></span>
                            <span class="relative inline-flex rounded-full h-2 w-2 ${pingClasses}"></span>
                        </span>
                        ${text}
                    `;
                } else {
                    analysisStatus.innerHTML = text;
                }
            }

            function triggerAlert() {
                // Play alert sound
                const alertSound = new Audio('/alert.wav');
                alertSound.play();

                // Add critical alert styling to all containers
                videoContainer.classList.add('critical-alert');
                assistantContainer.classList.add('critical-alert');
                autoAnalysisContainer.classList.add('critical-alert');

                // Activate overlay
                alertOverlay.classList.add('active');

                // Remove effects after 10 seconds
                setTimeout(() => {
                    videoContainer.classList.remove('critical-alert');
                    assistantContainer.classList.remove('critical-alert');
                    autoAnalysisContainer.classList.remove('critical-alert');
                    alertOverlay.classList.remove('active');
                }, 10000);
            }

            // --- Event Handlers ---

            videoFeed.onload = () => {
                console.log("Video stream loaded successfully.");
                updateStatus('LIVE', 'red');
                chatInput.disabled = false;
                chatButton.disabled = false;
                chatInput.placeholder = "Ask about the feed...";
                
                // Start auto analysis when stream is live
                updateAnalysisStatus('STARTING ANALYSIS', 'yellow');
                setTimeout(() => {
                    startAutoAnalysis();
                    updateAnalysisStatus('MONITORING', 'blue');
                }, 2000);
            };

            videoFeed.onerror = () => {
                console.error("Failed to load video stream.");
                if (!videoStatus.textContent.includes('FAILED')) {
                    updateStatus('STREAM FAILED', 'gray');
                    chatInput.placeholder = "Video stream failed to load.";
                    stopAutoAnalysis();
                    updateAnalysisStatus('STREAM FAILED', 'gray');
                }
            };

            chatForm.addEventListener('submit', async (e) => {
                e.preventDefault();
                const question = chatInput.value.trim();
                if (!question) return;

                // Reset alert effects
                videoContainer.classList.remove('critical-alert');
                assistantContainer.classList.remove('critical-alert');
                autoAnalysisContainer.classList.remove('critical-alert');
                alertOverlay.classList.remove('active');

                appendMessage(question, 'user');
                chatInput.value = '';
                chatInput.disabled = true;
                chatButton.disabled = true;

                const thinkingIndicator = appendMessage('Analyzing scene...', 'ai', true);

                try {
                    const ctx = canvas.getContext('2d');
                    canvas.width = videoFeed.naturalWidth;
                    canvas.height = videoFeed.naturalHeight;
                    ctx.drawImage(videoFeed, 0, 0, canvas.width, canvas.height);

                    const base64Frame = canvas.toDataURL('image/jpeg').split(',')[1];

                    const response = await fetch('/ask-question', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ question, frame: base64Frame })
                    });

                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(errorData.error || `Request failed with status: ${response.status}`);
                    }

                    const data = await response.json();

                    // Trigger alert if needed
                    if (data.alert) {
                        triggerAlert();
                    }

                    thinkingIndicator.querySelector('p').textContent = data.answer;
                    thinkingIndicator.querySelector('p').classList.remove('italic', 'text-gray-400');

                } catch (error) {
                    console.error('Error asking question:', error);
                    thinkingIndicator.querySelector('p').textContent = `Error: ${error.message}`;
                    thinkingIndicator.querySelector('p').classList.add('text-red-400');
                } finally {
                    chatInput.disabled = false;
                    chatButton.disabled = false;
                    chatInput.focus();
                }
            });

            function appendMessage(text, sender, isThinking = false) {
                const msgWrapper = document.createElement('div');
                const msgElement = document.createElement('p');
                msgElement.textContent = text;

                msgWrapper.className = sender === 'user' ? 'flex justify-end' : 'flex justify-start';
                msgElement.className = sender === 'user'
                    ? 'bg-blue-600 text-white rounded-lg p-3 max-w-xs'
                    : 'bg-gray-700 rounded-lg p-3 max-w-xs';

                if (isThinking) {
                    msgElement.classList.add('italic', 'text-gray-400');
                }

                msgWrapper.appendChild(msgElement);
                chatBox.appendChild(msgWrapper);
                chatBox.scrollTop = chatBox.scrollHeight;
                return msgWrapper;
            }

            function updateStatus(text, color) {
                let colorClasses = '';
                let pingClasses = '';

                switch (color) {
                    case 'yellow':
                        colorClasses = 'text-yellow-500';
                        pingClasses = 'bg-yellow-400';
                        break;
                    case 'red':
                        colorClasses = 'text-red-500';
                        pingClasses = 'bg-red-400';
                        break;
                    default:
                        colorClasses = 'text-gray-400';
                        pingClasses = '';
                }

                videoStatus.className = `flex items-center gap-2 text-sm font-semibold ${colorClasses}`;

                if (pingClasses) {
                    videoStatus.innerHTML = `
                <span class="relative flex h-3 w-3">
                    <span class="animate-ping absolute inline-flex h-full w-full rounded-full ${pingClasses} opacity-75"></span>
                    <span class="relative inline-flex rounded-full h-3 w-3 ${pingClasses.replace('400', '500')}"></span>
                </span>
                ${text}
            `;
                } else {
                    videoStatus.innerHTML = text;
                }
            }

            // --- INITIATE STREAM ON PAGE LOAD ---
            startStream(videoUrl);
        });
    </script>